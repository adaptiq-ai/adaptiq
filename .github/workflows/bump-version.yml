name: Bump Version

on:
  pull_request:
    types: [closed]
    branches: [pre-release]

permissions:
  contents: write

jobs:
  bump-version:
    if: github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'test') && !contains(github.event.pull_request.title, 'test')
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      version_type: ${{ steps.bump.outputs.version_type }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install packaging toml

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check if should skip version bump
        id: check-skip
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const prTitle = context.payload.pull_request.title.toLowerCase();
            const prBody = (context.payload.pull_request.body || '').toLowerCase();
            const labels = context.payload.pull_request.labels.map(label => label.name.toLowerCase());

            // Skip version bump for test-related PRs
            if (
              labels.includes('test') ||
              labels.includes('testing') ||
              prTitle.includes('test') ||
              prTitle.startsWith('test:') ||
              prTitle.startsWith('test/') ||
              prBody.includes('[skip-version]') ||
              prBody.includes('[no-version]')
            ) {
              core.setOutput('skip', 'true');
              console.log('Skipping version bump - test-related PR detected');
              return 'skip';
            }
            
            core.setOutput('skip', 'false');
            return 'proceed';

      - name: Determine version bump type
        if: steps.check-skip.outputs.skip != 'true'
        id: determine-bump
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const prTitle = context.payload.pull_request.title;
            const prBody = context.payload.pull_request.body || '';
            const labels = context.payload.pull_request.labels.map(label => label.name);

            if (
              labels.includes('breaking') ||
              prTitle.includes('!') ||
              prBody.includes('BREAKING CHANGE')
            ) {
              return 'major';
            }

            if (
              labels.includes('feat') ||
              prTitle.startsWith('feat:') ||
              prTitle.startsWith('feat/')
            ) {
              return 'minor';
            }

            if (
              labels.includes('fix') ||
              prTitle.startsWith('fix:') ||
              prTitle.startsWith('fix/')
            ) {
              return 'patch';
            }

            if (
              labels.includes('refactor') ||
              prTitle.startsWith('refactor:') ||
              prTitle.startsWith('refactor/')
            ) {
              return 'minor';
            }

            return 'patch';

      - name: Switch to pre-release branch
        if: steps.check-skip.outputs.skip != 'true'
        run: |
          git fetch origin pre-release
          git checkout pre-release
          git reset --hard origin/pre-release

      - name: Bump version
        if: steps.check-skip.outputs.skip != 'true'
        id: bump
        run: |
          BUMP_TYPE="${{ steps.determine-bump.outputs.result }}"

          cat > version_bump.py << 'EOF'
          import sys
          import re
          import os
          from packaging.version import Version

          def bump_version(current_version, bump_type):
              v = Version(current_version)
              if bump_type == 'major':
                  return f"{v.major + 1}.0.0"
              elif bump_type == 'minor':
                  return f"{v.major}.{v.minor + 1}.0"
              elif bump_type == 'patch':
                  return f"{v.major}.{v.minor}.{v.micro + 1}"
              raise ValueError(f"Unknown bump type: {bump_type}")

          def get_current_version():
              try:
                  import tomllib
                  with open('pyproject.toml', 'rb') as f:
                      return tomllib.load(f)['project']['version']
              except:
                  with open('src/adaptiq/__init__.py', 'r') as f:
                      content = f.read()
                      match = re.search(r'__version__\s*=\s*["\']([^"\']+)["\']', content)
                      return match.group(1) if match else "0.0.0"

          def update_version_in_files(new_version):
              with open('pyproject.toml', 'r+') as f:
                  content = re.sub(r'version\s*=\s*["\'][^"\']+["\']', f'version = "{new_version}"', f.read())
                  f.seek(0); f.write(content); f.truncate()

              init_path = 'src/adaptiq/__init__.py'
              os.makedirs(os.path.dirname(init_path), exist_ok=True)
              if os.path.exists(init_path):
                  with open(init_path, 'r+') as f:
                      content = re.sub(r'__version__\s*=\s*["\'][^"\']+["\']', f'__version__ = "{new_version}"', f.read())
                      f.seek(0); f.write(content); f.truncate()
              else:
                  with open(init_path, 'w') as f:
                      f.write(f'__version__ = "{new_version}"\\n')

          if __name__ == "__main__":
              bump_type = sys.argv[1]
              current_version = get_current_version()
              new_version = bump_version(current_version, bump_type)
              print(f"CURRENT_VERSION={current_version}")
              print(f"NEW_VERSION={new_version}")
              print(f"BUMP_TYPE={bump_type}")
              update_version_in_files(new_version)
          EOF

          python version_bump.py $BUMP_TYPE > version_output.txt
          CURRENT_VERSION=$(grep CURRENT_VERSION= version_output.txt | cut -d= -f2)
          NEW_VERSION=$(grep NEW_VERSION= version_output.txt | cut -d= -f2)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          rm version_bump.py version_output.txt

      - name: Commit version changes
        if: steps.check-skip.outputs.skip != 'true'
        run: |
          git add pyproject.toml src/adaptiq/__init__.py
          git commit -m "Bump version: ${{ steps.bump.outputs.current_version }} â†’ ${{ steps.bump.outputs.new_version }}"

      - name: Update CHANGELOG.md
        if: steps.check-skip.outputs.skip != 'true'
        run: |
          DATE=$(date +"%Y-%m-%d")
          TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"

          if [ -f "CHANGELOG.md" ]; then
            tail -n +2 CHANGELOG.md > old_changelog.md
          fi

          cat > CHANGELOG.md << EOF
          # Changelog

          ## [v$NEW_VERSION] - $DATE

          ### Added
          - $TITLE

          ### Changed
          - Updated from PR #$PR_NUMBER

          EOF

          if [ -f "old_changelog.md" ]; then
            cat old_changelog.md >> CHANGELOG.md
            rm old_changelog.md
          fi

          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md for v$NEW_VERSION"

      - name: Push version bump
        if: steps.check-skip.outputs.skip != 'true'
        run: |
          git push origin pre-release

      - name: Build package
        if: steps.check-skip.outputs.skip != 'true'
        run: |
          python -m pip install --upgrade build
          python -m build

      - name: Publish to PyPI Test
        if: steps.check-skip.outputs.skip != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          verbose: true

      - name: Log skip reason
        if: steps.check-skip.outputs.skip == 'true'
        run: |
          echo "Version bump skipped - test-related PR detected"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "Labels: ${{ join(github.event.pull_request.labels.*.name, ', ') }}"

      - name: Rollback on failure
        if: failure() && steps.check-skip.outputs.skip != 'true'
        run: |
          echo "Build or publish failed. Rolling back changes..."
          git reset --hard HEAD~2
          git push origin pre-release --force
          exit 1