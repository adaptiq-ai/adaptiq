name: Bump Version

on:
  pull_request:
    types: [closed]
    branches: [pre-release]

permissions:
  contents: write

jobs:
  bump-version:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      version_type: ${{ steps.bump.outputs.version_type }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version packaging tomllib-w

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump type
        id: determine-bump
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const prTitle = context.payload.pull_request.title;
            const prBody = context.payload.pull_request.body || '';
            const labels = context.payload.pull_request.labels.map(label => label.name);

            if (labels.includes('breaking') || prTitle.includes('!') || prBody.includes('BREAKING CHANGE')) {
              return 'major';
            }
            if (labels.includes('feat') || prTitle.startsWith('feat:') || prTitle.startsWith('feature:')) {
              return 'minor';
            }
            if (labels.includes('fix') || prTitle.startsWith('fix:') || prTitle.startsWith('bugfix:')) {
              return 'patch';
            }
            if (labels.includes('refactor') || prTitle.startsWith('refactor:')) {
              return 'minor';
            }
            return 'patch';

      - name: Get current version
        id: current-version
        run: |
          if [ -f "pyproject.toml" ]; then
            CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          elif [ -f "src/adaptiq/__init__.py" ]; then
            CURRENT_VERSION=$(python -c "import re; content=open('src/adaptiq/__init__.py').read(); print(re.search(r'__version__\s*=\s*[\"'](.*?)[\"']', content).group(1))")
          elif [ -f "adaptiq/__init__.py" ]; then
            CURRENT_VERSION=$(python -c "import re; content=open('adaptiq/__init__.py').read(); print(re.search(r'__version__\s*=\s*[\"'](.*?)[\"']', content).group(1))")
          else
            CURRENT_VERSION="0.0.0"
          fi
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Switch to pre-release branch
        run: |
          git fetch origin pre-release
          git checkout pre-release
          git reset --hard origin/pre-release

      - name: Create or update .bumpversion.cfg
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
          
          # Determine which files exist and need to be updated
          FILES_CONFIG=""
          
          if [ -f "pyproject.toml" ]; then
            FILES_CONFIG="$FILES_CONFIG
          [bumpversion:file:pyproject.toml]
          search = version = \"{current_version}\"
          replace = version = \"{new_version}\""
          fi
          
          if [ -f "src/adaptiq/__init__.py" ]; then
            FILES_CONFIG="$FILES_CONFIG
          [bumpversion:file:src/adaptiq/__init__.py]
          search = __version__ = \"{current_version}\"
          replace = __version__ = \"{new_version}\""
          elif [ -f "adaptiq/__init__.py" ]; then
            FILES_CONFIG="$FILES_CONFIG
          [bumpversion:file:adaptiq/__init__.py]
          search = __version__ = \"{current_version}\"
          replace = __version__ = \"{new_version}\""
          fi
          
          cat > .bumpversion.cfg << EOF
          [bumpversion]
          current_version = $CURRENT_VERSION
          commit = True
          tag = True
          tag_name = v{new_version}
          message = Bump version: {current_version} â†’ {new_version}
          $FILES_CONFIG
          EOF
          
          echo "Generated .bumpversion.cfg:"
          cat .bumpversion.cfg

      - name: Bump version
        id: bump
        run: |
          BUMP_TYPE="${{ steps.determine-bump.outputs.result }}"
          CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"

          echo "Bumping version: $CURRENT_VERSION -> $BUMP_TYPE"

          bump2version $BUMP_TYPE --verbose

          # Get the new version after bump
          if [ -f "pyproject.toml" ]; then
            NEW_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          elif [ -f "src/adaptiq/__init__.py" ]; then
            NEW_VERSION=$(python -c "import re; content=open('src/adaptiq/__init__.py').read(); print(re.search(r'__version__\s*=\s*[\"'](.*?)[\"']', content).group(1))")
          elif [ -f "adaptiq/__init__.py" ]; then
            NEW_VERSION=$(python -c "import re; content=open('adaptiq/__init__.py').read(); print(re.search(r'__version__\s*=\s*[\"'](.*?)[\"']', content).group(1))")
          else
            NEW_VERSION="0.0.1"
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          DATE=$(date +"%Y-%m-%d")

          if [ -f "CHANGELOG.md" ]; then
            sed -i "2i\\
          ## [v$NEW_VERSION] - $DATE\\
          \\
          ### Added\\
          - ${{ github.event.pull_request.title }}\\
          \\
          ### Changed\\
          - Updated from PR #${{ github.event.pull_request.number }}\\
          \\
          " CHANGELOG.md
          else
            cat > CHANGELOG.md << EOF
          # Changelog

          ## [v$NEW_VERSION] - $DATE

          ### Added
          - ${{ github.event.pull_request.title }}

          ### Changed
          - Updated from PR #${{ github.event.pull_request.number }}

          EOF
          fi

          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md for v$NEW_VERSION" || echo "No changelog changes to commit"

      - name: Push version bump and tags
        run: |
          git push origin pre-release
          git push origin --tags

      - name: Build package
        id: build-package
        run: |
          python -m pip install --upgrade build
          python -m build

      - name: Publish to PyPI Test
        id: publish-test
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          verbose: true


      - name: Rollback on failure
        if: failure()
        run: |
          echo "Build or publish failed. Rolling back changes..."
          
          # Get the version that was just created
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          
          # Delete the tag locally and remotely
          if [ -n "$NEW_VERSION" ]; then
            git tag -d "v$NEW_VERSION" || echo "Local tag not found"
            git push origin --delete "v$NEW_VERSION" || echo "Remote tag not found"
          else
            echo "No NEW_VERSION to rollback"
          fi
          
          # Reset pre-release branch to previous commit
          git reset --hard HEAD~2
          git push origin pre-release --force
          
          echo "Rollback completed. Version bump and tags have been reverted."
          
          # Exit with failure to mark the workflow as failed
          exit 1