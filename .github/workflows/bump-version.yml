name: Bump Version

on:
  pull_request:
    branches: [ dummy ]
    types: [ closed ]

jobs:
  bump-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      version_type: ${{ steps.bump.outputs.version_type }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bump2version packaging
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Determine version bump type
      id: determine-bump
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          const prTitle = context.payload.pull_request.title;
          const prBody = context.payload.pull_request.body || '';
          const labels = context.payload.pull_request.labels.map(label => label.name);
          
          console.log('PR Title:', prTitle);
          console.log('PR Labels:', labels);
          
          // Check for breaking changes
          if (labels.includes('breaking') || 
              prTitle.includes('!') || 
              prBody.includes('BREAKING CHANGE')) {
            return 'major';
          }
          
          // Check for features
          if (labels.includes('feat') || 
              prTitle.startsWith('feat:') || 
              prTitle.startsWith('feature:')) {
            return 'minor';
          }
          
          // Check for fixes
          if (labels.includes('fix') || 
              prTitle.startsWith('fix:') || 
              prTitle.startsWith('bugfix:')) {
            return 'patch';
          }
          
          // Check for refactor that might be breaking
          if (labels.includes('refactor') || prTitle.startsWith('refactor:')) {
            return 'minor';
          }
          
          // Default to patch for other changes
          return 'patch';
    
    - name: Get current version
      id: current-version
      run: |
        if [ -f "setup.py" ]; then
          CURRENT_VERSION=$(python -c "exec(open('setup.py').read()); print(version if 'version' in locals() else '')")
        elif [ -f "pyproject.toml" ]; then
          CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        elif [ -f "adaptiq/__init__.py" ]; then
          CURRENT_VERSION=$(python -c "import re; content=open('adaptiq/__init__.py').read(); print(re.search(r'__version__\s*=\s*[\"\'](.*?)[\"\']', content).group(1))")
        else
          CURRENT_VERSION="0.0.0"
        fi
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
    
    - name: Bump version
      id: bump
      run: |
        BUMP_TYPE="${{ steps.determine-bump.outputs.result }}"
        CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
        
        echo "Bumping version: $CURRENT_VERSION -> $BUMP_TYPE"
        
        # Create .bumpversion.cfg if it doesn't exist
        if [ ! -f ".bumpversion.cfg" ]; then
          cat > .bumpversion.cfg << EOF
        [bumpversion]
        current_version = $CURRENT_VERSION
        commit = True
        tag = False
        message = Bump version: {current_version} â†’ {new_version}

        [bumpversion:file:setup.py]
        search = version="{current_version}"
        replace = version="{new_version}"

        [bumpversion:file:adaptiq/__init__.py]
        search = __version__ = "{current_version}"
        replace = __version__ = "{new_version}"

        [bumpversion:file:pyproject.toml]
        search = version = "{current_version}"
        replace = version = "{new_version}"
        EOF
        fi
        
        # Bump version
        bump2version $BUMP_TYPE --verbose
        
        # Get new version from the updated files
        if [ -f "setup.py" ]; then
          NEW_VERSION=$(python -c "exec(open('setup.py').read()); print(version if 'version' in locals() else '')")
        elif [ -f "pyproject.toml" ]; then
          NEW_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        elif [ -f "adaptiq/__init__.py" ]; then
          NEW_VERSION=$(python -c "import re; content=open('adaptiq/__init__.py').read(); print(re.search(r'__version__\s*=\s*[\"\'](.*?)[\"\']', content).group(1))")
        else
          NEW_VERSION="0.0.1"
        fi
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        
        echo "New version: $NEW_VERSION"
    
    - name: Update CHANGELOG.md
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new_version }}"
        DATE=$(date +"%Y-%m-%d")
        
        if [ -f "CHANGELOG.md" ]; then
          # Add new version entry to changelog
          sed -i "2i\\
        ## [v$NEW_VERSION] - $DATE\\
        \\
        ### Added\\
        - ${{ github.event.pull_request.title }}\\
        \\
        ### Changed\\
        - Updated from PR #${{ github.event.pull_request.number }}\\
        \\
        " CHANGELOG.md
        else
          # Create new changelog
          cat > CHANGELOG.md << EOF
        # Changelog

        ## [v$NEW_VERSION] - $DATE

        ### Added
        - ${{ github.event.pull_request.title }}

        ### Changed
        - Updated from PR #${{ github.event.pull_request.number }}

        EOF
        fi
        
        git add CHANGELOG.md
        git commit -m "Update CHANGELOG.md for v$NEW_VERSION" || echo "No changelog changes to commit"
    
    - name: Push changes
      run: |
        git push origin main